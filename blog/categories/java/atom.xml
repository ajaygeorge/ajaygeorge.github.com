<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Ajay George Code Blog]]></title>
  <link href="http://ajaygeorge.github.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://ajaygeorge.github.com/"/>
  <updated>2013-03-17T01:06:42+05:30</updated>
  <id>http://ajaygeorge.github.com/</id>
  <author>
    <name><![CDATA[Ajay George]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[First among Equals]]></title>
    <link href="http://ajaygeorge.github.com/blog/2013/03/17/first-among-equals/"/>
    <updated>2013-03-17T00:37:00+05:30</updated>
    <id>http://ajaygeorge.github.com/blog/2013/03/17/first-among-equals</id>
    <content type="html"><![CDATA[<p>Much has been told about the <code>Equals</code> method in java. It's importance along with <code>HashCode</code> is well documented.</p>

<p>The contract of equals method states that it should be</p>

<blockquote><p>Reflexive, Symmetric, Transitive and Consistent.</p></blockquote>

<p>Symmetry sounds easy, but could be extremely hard to get right.</p>

<p>The <code>CaseInsensitive</code> String example in Effective Java Item 8 is an excellent discussion on the same. Read it if you haven't read it already.</p>

<p>I was quite surprised to find the equals implementation broken in the <a href="https://jira.mongodb.org/browse/JAVA-609">MongoDB Java Driver</a>.</p>

<p>The equals Implementation:
``` java Equals code</p>

<pre><code>public boolean equals( Object o ){

    if ( this == o )
        return true;

    ObjectId other = massageToObjectId( o );
    if ( other == null )
        return false;

    return
        _time == other._time &amp;&amp;
        _machine == other._machine &amp;&amp;
        _inc == other._inc;
}
</code></pre>

<p>```</p>

<p>The culprit is the massageToObjectId method used in the equals Implementation.
``` java</p>

<pre><code>/** Turn an object into an &lt;code&gt;ObjectId&lt;/code&gt;, if possible.
 * Strings will be converted into &lt;code&gt;ObjectId&lt;/code&gt;s, if possible, and &lt;code&gt;ObjectId&lt;/code&gt;s will
 * be cast and returned.  Passing in &lt;code&gt;null&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;.
 * @param o the object to convert
 * @return an &lt;code&gt;ObjectId&lt;/code&gt; if it can be massaged, null otherwise
 */
public static ObjectId massageToObjectId( Object o ){
    if ( o == null )
        return null;

    if ( o instanceof ObjectId )
        return (ObjectId)o;

    if ( o instanceof String ){
        String s = o.toString();
        if ( isValid( s ) )
            return new ObjectId( s );
    }

    return null;
}
</code></pre>

<p>```
The author's intention is pure here. Take advantage of a String being represented as the ObjectID.</p>

<p>But the issue is that now you can have <code>ObjectId.equals(String)</code> but not <code>String.equals(ObjectId)</code> which violates the Symmetry contract.</p>

<p>Fix would be remove the instanceof check for String and deal with only ObjectIds</p>

<p>Hope the core developers get around making this fix.</p>
]]></content>
  </entry>
  
</feed>
